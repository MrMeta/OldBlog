title: Bash의 [..]와 [[..]]에 대하여
---
pub_date: 2018-01-17 18:50:00
---
author: MrMeta
---
tags:

bash
---
premise: 이 포스트는 BSD Bash 3.2 환경에서 작성되었습니다.
---
body:

Bash에서 test와 [..]는 기능적으로 완전히 동일합니다.
주어진 expression이 true로 평가되면 0을, 그렇지 않다면 1을 반환하는 __커맨드__ 입니다.

또한 Bash는 이와 비슷한 용도로 [[..]]도 제공합니다.
[..]와 마찬가지로 주어진 expression이 true로 평가되면 0을, 그렇지 않다면 1을 반환합니다.
[[..]]는 [..]의 적절한 번형 정도로 이해할 수 있습니다.
[..]에 오는 대부분의 expression을 사용할 수 있기 때문입니다.
예를 들면 다음의 예제에서 [..]는 [[..]]로 완전히 대체할 수 있습니다.

```Bash
if [ -f filename ]; then echo "true"; else echo "false"; fi

fruit="peach"
if [ $fruit = "banana" ]; then echo "true"; else echo "false"; fi

# ${#fruit}은 문자열 fruit의 길이로 변환되는 expansion입니다.
if [ ${#fruit} -gt 5 ]; then echo "true"; else echo "false"; fi
```

위 예제에서 =는 숫자 간 비교를 위한 연산자가 아니라 __문자열 비교를 위한 연산자라는 점을 주의__ 해야 합니다.
<, >, =, !=는 문자열 비교를 위한 연산자이며 두 문자열을 사전 순서대로 비교한 결과를 반환합니다.
숫자 연산은 -gt, -ge, -lt, -le, -eq, -ne 연산자를 통해 할 수 있습니다.
__<, > 연산자를 숫자와 함께 사용하면 그 숫자는 문자열로 판단되어 연산이 평가됩니다.
이는 사용자가 의도한 결과와는 다를 수 있으므로 숫자 연산과 문자열 연산을 구분해서 사용해야 합니다.__

그럼 이제 [..]와 [[..]]의 차이점을 살펴보겠습니다.



## [..]와 [[..]]의 차이점


### 1. [..]안에서 <, > 연산자를 사용할 때는 escape나 quoting해야 한다.

아래 예제는 "apple"과 "cherry"를 사전 순서로 비교하는 예제입니다.

```Bash
if [ "apple" > "cherry" ]; then
    echo "apple > cherry"
elif [ "apple" = "cherry" ]; then
    echo "apple = cherry"
else
    echo "apple < cherry"
fi
```

위 예제를 실행해보면 "apple > cherry"가 출력되는 것을 볼 수 있습니다.
위 설명대로 <, >, = 연산자가 사전 순서대로 문자열을 비교한다면 "apple < cherry"가 출력되었어야 합니다.
왜 이런 결과가 나왔을까요?

이 의문을 해결하기 위한 힌트는 위 예제를 실행한 작업 디렉토리에서 찾을 수 있습니다.
작업 디렉토리에 가보면 cherry 파일이 생성된 것을 확인할 수 있습니다(cherry 파일이 없었을 경우).
왜 cherry 파일이 생성되었을까요?

답은 [..]의 동작방식에 있습니다. 이해를 쉽게 하기 위해 위 예제를 test를 이용해 다시 써보겠습니다.

```Bash
if test "apple" > "cherry"; then
    echo "apple > cherry"
elif test "apple" = "cherry"; then
    echo "apple = cherry"
else
    echo "apple < cherry"
fi
```

문제가 되는 부분은 바로 __test "apple" > "cherry"__ 입니다.
우리는 예제에서 '>' 문자를 문자열 비교를 위해 사용했지만 사실 '>'는 output redirection이라는 다른 기능을 가지고 있습니다.
위 예제에서 '>'가 output redirection으로 동작했기 떄문에 cherry라는 파일이 생긴 것입니다.
또한 '>'와 "cherry"가 redirection을 위해 사용되기 때문에 test는 "apple"만을 인자로 받아 0(true)을 반환하게 됩니다.
그래서 "apple > cherry"가 출력되게 된 것입니다.

따라서 위와 같은 동작을 막기 위해서는 [..]\(test\)에 문자열 비교를 위한 <, > 연산자를 넘겨줄 때 아래와 같이 escape나 quoting해야 합니다.

```Bash
if [ "apple" \> "cherry"]; then
...

if [ "apple" ">" "cherry"]; then
...
```

[..]와 반대로 [[..]]를 사용할 때는 아래와 같이 <, > 연산자에 대해 escape나 quoting을 해줄 필요가 없습니다.

```Bash
if [[ "apple" > "cherry"]]; then
...
```

[[..]] 안에서 escape나 quoting을 해줄 필요가 없는 이유는 [[..]]가 [..]와 다르게 커맨드가 아니라 키워드이기 때문입니다.
[..]은 expression을 공백문자로 구분해 쪼개어 각각 입력받는 일반적인 커맨드인 반면, [[..]]은 expression 그 자체를 가지고 평가합니다.


### 2. [[..]]안에 있는 expression에는 word splitting과 pathname expansion(filename expansion)이 일어나지 않는다.

아래 스크립트는 변수의 값이 문자열과 같은지를 판단하는 예제입니다.

```Bash
sentence="Bash is Bourne-again shell."

# correct result
if [[ $sentence = "Bash is Bourne-again shell." ]]; then
    echo "Two strings are equal."
fi

# raise error [: too many arguments
if [ $sentence = "Bash is Bourne-again shell." ]; then
    echo "Two strings are equal."
fi
```

위 예제를 실행시켜보면 [[..]]을 사용한 if에서는 "Two strings are equal."가 출력되고,
[..]을 사용한 if에서는 [: too many arguments 에러가 발생한 것을 알 수 있습니다.

word splitting이 발생하지 않는 [[..]]에서는 $sentence가 "Bash is Bourne-again shell." 그 자체로 변환되기 때문에 원하는 결과가 나옵니다.
하지만 [..]에서는 word splitting이 발생하기 떄문에 문자열은 "Bash" "is" "Bourne-again" "shell."이라는 각각의 문자열로 분리되고
이 문자열들이 모두 [..]의 argument로 들어가게 됩니다. 따라서 too many arguments 에러가 발생하게 되는 것이죠.

[..]를 사용했을 때 word splitting이 발생하는 문제를 해결하기 위해서는 $sentence를 quoting해주면 됩니다.

```Bash
if [ "$sentence" = "Bash is Bourne-again shell." ]; then
    echo "Two strings are equal."
fi
```


### 3. [[..]]에서는 문자열 연산에서 정규식을 사용할 수 있다.

[[..]]에서 == 연산자를 사용하면 문자열이 주어진 패턴에 매치되는지를 평가하여 그 여부에 따라 0 또는 1을 리턴합니다. 아래처럼 사용하면 됩니다.

```Bash
if [[ "Apple" == A__ ]]; then echo "true"; fi
if [[ $var == A* ]]; then echo "true"; fi
```

아래와 같이 사용하면 의도한 결과를 낼 수 없습니다.

```Bash
# = 연산자로는 정규식 매칭을 할 수 없습니다.
if [[ "Apple" = A* ]]; then echo "true"; fi

# [..]로는 정규식 매칭을 할 수 없습니다.
if [ "Apple" == A* ]; then echo "true"; fi

# 정규식은 쿼우팅되면 안됩니다.
if [[ "Apple" == "A*" ]]; then echo "true"; fi
```

또한, [[..]]에서 !=도 패턴 매칭을 사용합니다.


### 4. 조건을 잇는 논리 연산자 AND, OR를 나타태는 방법이 다르다.

[..]와 [[..]]에서는 각 조건을 AND 혹은 OR할 수 있는데, 그 방법이 약간 상이합니다.

```Bash
if [ ${#var} -ge 5 -a ${#var} -lt 10 ]; then echo "correct"; fi
if [ "$filename" = "log" -o "$filename" = "Log" ]; then echo "correct"; fi

# 위 스크립트와 같은 결과를 반환합니다.
if [[ ${#var} -ge 5 && ${#var} -lt 10 ]]; then echo "correct"; fi
if [[ "$filename" = "log" || "$filename" = "Log" ]]; then echo "correct"; fi
```



## 산술연산을 조금 더 편하게 할 수 없을까?

-eq, -gt 등을 통해 산술 연산을 하는 것은 C나 Java같은 다른 프로그래밍 언어에 익숙한 분들에게는 약간은 어색합니다.
<, > 등 일반적으로 프로그래밍 언어에서 사용하는 방법으로 비교 연산을 하고 싶은 경우에는 다음 예제와 같이 ((..))를 사용하면 됩니다.

```Bash
# if [ ${#fruit} -gt 4 ]; then 과 같은 의미를 가지고 있습니다.
if (( ${#fruit} > 4 )); then
    echo "The length of \"fruit\" is greater than 4"
fi
```

또한, [..], [[..]]와는 달리 ((..))에서는 +, - 등 다른 산술 연산도 가능합니다

```Bash
if (( $applicant > $capacity * 2 )); then
    echo "The number of applicants far exceeded capacity"
fi
```



## 정리

1. [..] [[..]]을 사용할 때는 문자열 연산과 숫자 연산에 쓰이는 연산자를 혼동하지 말아야 합니다.
2. [..]에서 <, > 연산자를 사용할 때는 escape나 quoting해줘야 합니다. [[..]]에서는 필요없습니다.
3. [[..]]에서는 [..]와는 다르게 word splitting과 pathname expansion이 일어나지 않습니다.
4. [[..]]에서는 == 연산자를 사용해 문자열이 정규식이 매칭되는지를 평가할 수 있습니다.
5. [..], [[..]]은 AND와 OR를 표현하는 방법이 각각 다릅니다.
6. 수학 기호들(<, >, == 등)을 사용하고 싶거나 산술 연산이 들어가야 하는 경우에는 [..], [[..]] 대신 ((..))를 사용합니다.